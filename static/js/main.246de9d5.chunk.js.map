{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Robot.js","Components/ErrorBoundries.js","Containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","className","alt","src","this","props","id","name","Component","CardList","Robots","map","bot","i","key","React","SearchBox","type","placeholder","onInput","onSearchChange","Scroll","style","overflowY","border","height","children","username","email","ErrorBooundry","state","hasError","error","info","setState","App","e","searchfield","target","value","filterBots","fetch","then","Response","json","uesr","filter","toLocaleLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.246de9d5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\n\n\nclass Card extends Component {\n  render() {\n      return(\n          <div className='tc bg-light-blue  dib br3 pa3 ma2 grow bw2 shadow-5'>\n              <img alt='Robot' src={`https://robohash.org/${this.props.id}`} />\n              <h2>{this.props.name}</h2>\n          </div>\n      );\n  }\n}\nexport default Card;     ","import React from 'react';\nimport Card from './Card';\n// import { Robots } from './Robot';\n\nclass CardList extends React.Component {  \n  render() {\n      return(\n          <div>\n            { \n              this.props.Robots.map((bot,i) =>(\n                    <Card \n                        key={i} \n                        id={bot.id} \n                        name={bot.name}\n                    />\n                ))\n            }\n          </div>\n      );\n    }\n}\n\nexport default CardList;","import React from 'react';\n\n\nclass SearchBox extends React.Component{\n    render(){\n        return(\n            <div className='pa2'>\n                <div className='pa3 '>\n                <input type='search' placeholder='Search robots' onInput={this.props.onSearchChange} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SearchBox;","import React, { Component } from 'react';\n\nclass Scroll extends Component{\n    render(){\n        return(\n            <div style={{overflowY :'scroll',border:'5px solid black',height:'430px'}}>\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nexport default Scroll;","export const Robots = [\n    {\n      id: 1,\n      name: 'Leanne Graham',\n      username: 'Bret',\n      email: 'Sincere@april.biz'\n    },\n    {\n      id: 2,\n      name: 'Ervin Howell',\n      username: 'Antonette',\n      email: 'Shanna@melissa.tv'\n    },\n    {\n      id: 3,\n      name: 'Clementine Bauch',\n      username: 'Samantha',\n      email: 'Nathan@yesenia.net'\n    },\n    {\n      id: 4,\n      name: 'Patricia Lebsack',\n      username: 'Karianne',\n      email: 'Julianne.OConner@kory.org'\n    },\n    {\n      id: 5,\n      name: 'Chelsey Dietrich',\n      username: 'Kamren',\n      email: 'Lucio_Hettinger@annie.ca'\n    },\n    {\n      id: 6,\n      name: 'Mrs. Dennis Schulist',\n      username: 'Leopoldo_Corkery',\n      email: 'Karley_Dach@jasper.info'\n    },\n    {\n      id: 7,\n      name: 'Kurtis Weissnat',\n      username: 'Elwyn.Skiles',\n      email: 'Telly.Hoeger@billy.biz'\n    },\n    {\n      id: 8,\n      name: 'Nicholas Runolfsdottir V',\n      username: 'Maxime_Nienow',\n      email: 'Sherwood@rosamond.me'\n    },\n    {\n      id: 9,\n      name: 'Glenna Reichert',\n      username: 'Delphine',\n      email: 'Chaim_McDermott@dana.io'\n    },\n    {\n      id: 10,\n      name: 'Clementina DuBuque',\n      username: 'Moriah.Stanton',\n      email: 'Rey.Padberg@karina.biz'\n    }\n  ];\n  ","import { Component, React } from 'react';\n\nclass ErrorBooundry extends Component{\n    constructor(props){\n        super(props);\n        this.state ={\n            hasError : false,\n        }\n    }\n\n    componentDidCatch(error,info){\n        this.setState({hasError : true})\n    }\n\n    render(){\n        if(this.state.hasError){\n            return <h1>Opps! Somthing is Wrong</h1>\n        }\n        return this.props.children;\n    }\n}\nexport default ErrorBooundry;","import React from 'react';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox';\nimport Scroll from '../Components/Scroll';\nimport './App.css';\nimport { Robots } from '../Robot';\nimport ErrorBooundry from '../Components/ErrorBoundries';\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state ={\n      Robots : [],\n      searchfield : '',\n      filterBots :Robots,\n    }; \n  }\n\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(Response => Response.json())\n  .then(uesr => this.setState({Robots:uesr}))\n}\n\nonSearchChange =(e) =>{\n  this.setState({searchfield :e.target.value})\n}\n    \nrender() {\n  const {Robots,searchfield} = this.state;\n  const filterBots = Robots.filter(Robots => { return Robots.name.toLocaleLowerCase().includes(searchfield.toLocaleLowerCase());})\n    return !Robots.length ? <h1>Loding</h1> :\n    (\n      <div className='tc'>\n        <h1 className='f1'>Robofriends</h1>\n        <SearchBox onSearchChange = {this.onSearchChange}/>\n        <Scroll>\n          <ErrorBooundry>\n            <CardList Robots ={filterBots}/>\n          </ErrorBooundry>\n        </Scroll>\n      </div>\n    );\n}\n\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './Containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}